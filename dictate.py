#!/usr/bin/env python3
"""
Magyar nyelv≈± dikt√°l√≥ program Whisper haszn√°lat√°val
Haszn√°lat: python dictate.py [--model MODEL_SIZE] [--output-dir DIR]
"""

import argparse
import datetime
import os
import sys
import tempfile
import threading
import logging
from pathlib import Path

try:
    import whisper
    import pyaudio
    import wave
    import select
    import tty
    import termios
except ImportError as e:
    print(f"Hi√°nyz√≥ f√ºgg≈ës√©g: {e}")
    print("Telep√≠tsd a sz√ºks√©ges csomagokat:")
    print("pip install openai-whisper pyaudio")
    sys.exit(1)

class HungarianDictation:
    def __init__(self, model_size="base", output_dir="diktatum"):
        """
        Inicializ√°lja a dikt√°l√≥ rendszert
        
        Args:
            model_size: Whisper model m√©rete (tiny, base, small, medium, large)
            output_dir: Kimeneti k√∂nyvt√°r neve
        """
        self.model_size = model_size
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # Logging be√°ll√≠t√°sa
        self.setup_logging()
        
        # Audio be√°ll√≠t√°sok
        self.chunk = 1024
        self.format = pyaudio.paInt16
        self.channels = 1
        self.rate = 16000
        
        # ALSA hib√°k elnyom√°sa
        import os

        os.environ['ALSA_CARD'] = 'default'
        
        self.audio = pyaudio.PyAudio()
        self.recording = False
        self.frames = []
        
        # Terminal be√°ll√≠t√°sok billenty≈±zet olvas√°shoz
        self.old_settings = None

        print(f"Whisper model bet√∂lt√©se ({model_size})...")
        self.logger.info(f"Whisper model bet√∂lt√©se: {model_size}")
        try:
            self.model = whisper.load_model(model_size)
            print("Model sikeresen bet√∂ltve!")
            self.logger.info("Whisper model sikeresen bet√∂ltve")
        except Exception as e:
            print(f"Hiba a model bet√∂lt√©sekor: {e}")
            self.logger.error(f"Hiba a model bet√∂lt√©sekor: {e}")
            sys.exit(1)
    
    def setup_logging(self):
        """Logging be√°ll√≠t√°sa"""
        log_file = self.output_dir / "dictate.log"

        # Logger l√©trehoz√°sa
        self.logger = logging.getLogger('dictate')
        self.logger.setLevel(logging.INFO)
 
        # File handler
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        
        # Form√°tum be√°ll√≠t√°sa
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        file_handler.setFormatter(formatter)
        
        # Handler hozz√°ad√°sa
        if not self.logger.handlers:  # Elker√ºli a duplik√°l√°st
            self.logger.addHandler(file_handler)
        
        self.logger.info("="*50)
        self.logger.info("Dictate program elind√≠tva")
    
    def start_recording(self):
        """Elind√≠tja a hangfelv√©telt"""
        if self.recording:
            return
            
        self.recording = True
        self.frames = []
        
        try:
            self.stream = self.audio.open(
                format=self.format,
                channels=self.channels,
                rate=self.rate,
                input=True,
                frames_per_buffer=self.chunk
            )
            
            print("üé§ Felv√©tel elkezdve...")
            self.logger.info("Hangfelv√©tel elind√≠tva")
            
            # H√°tt√©rben fut a felv√©tel
            self.record_thread = threading.Thread(target=self._record_audio)
            self.record_thread.start()
            
        except Exception as e:
            print(f"Hiba a felv√©tel ind√≠t√°sakor: {e}")
            self.logger.error(f"Hiba a felv√©tel ind√≠t√°sakor: {e}")
            self.recording = False
    
    def _record_audio(self):
        """H√°tt√©rben r√∂gz√≠ti a hangot"""
        frame_count = 0
        while self.recording:
            try:
                data = self.stream.read(self.chunk, exception_on_overflow=False)
                self.frames.append(data)
                frame_count += 1
                
                # Logol√°s minden 100 frame-n√©l (kb. m√°sodpercenk√©nt)
                if frame_count % 100 == 0:
                    duration = frame_count * self.chunk / self.rate
                    self.logger.debug(f"Felv√©tel folyik: {duration:.1f} m√°sodperc")
                    
            except Exception as e:
                self.logger.error(f"Hiba a felv√©tel sor√°n: {e}")
                break
    
    def stop_recording(self):
        """Le√°ll√≠tja a hangfelv√©telt √©s feldolgozza"""
        if not self.recording:
            return
            
        self.recording = False
        print("‚èπÔ∏è  Felv√©tel le√°ll√≠tva, feldolgoz√°s...")
        
        duration = len(self.frames) * self.chunk / self.rate
        self.logger.info(f"Felv√©tel le√°ll√≠tva, id≈ëtartam: {duration:.2f} m√°sodperc")
        
        # V√°rjuk meg a record thread befejez≈ëd√©s√©t
        if hasattr(self, 'record_thread'):
            self.record_thread.join()
        
        try:
            self.stream.stop_stream()
            self.stream.close()
        except Exception as e:
            self.logger.warning(f"Stream z√°r√°si hiba: {e}")
        
        if not self.frames:
            print("Nincs r√∂gz√≠tett hang.")
            self.logger.warning("Nincs r√∂gz√≠tett hang")
            return
        
        # Ideiglenes f√°jl l√©trehoz√°sa
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
            temp_filename = temp_file.name
            
            # WAV f√°jl √≠r√°sa
            wf = wave.open(temp_filename, 'wb')
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.audio.get_sample_size(self.format))
            wf.setframerate(self.rate)
            wf.writeframes(b''.join(self.frames))
            wf.close()
        
        self.logger.info(f"Ideiglenes WAV f√°jl l√©trehozva: {temp_filename}")
        
        # Whisper feldolgoz√°s
        try:
            print("ü§ñ Besz√©dfelismer√©s folyamatban...")
            self.logger.info("Whisper feldolgoz√°s elkezdve")
            
            result = self.model.transcribe(
                temp_filename, 
                language="hu",  # Magyar nyelv
                task="transcribe"
            )
            
            transcribed_text = result["text"].strip()
            self.logger.info(f"Whisper eredm√©ny: '{transcribed_text}' (konfidencia adatok: {result.get('segments', [])})")
            
            if transcribed_text:
                self.save_transcription(transcribed_text)
                print(f"‚úÖ Sz√∂veg mentve!")
                print(f"üìù Felismert sz√∂veg: {transcribed_text}")
            else:
                print("‚ùå Nem siker√ºlt sz√∂veget felismerni.")
                self.logger.warning("√úres sz√∂veg eredm√©ny a Whisper-t≈ël")
                
        except Exception as e:
            print(f"Hiba a besz√©dfelismer√©s sor√°n: {e}")
            self.logger.error(f"Whisper feldolgoz√°si hiba: {e}")
        finally:
            # Ideiglenes f√°jl t√∂rl√©se
            try:
                os.unlink(temp_filename)
                self.logger.info("Ideiglenes f√°jl t√∂r√∂lve")
            except Exception as e:
                self.logger.warning(f"Ideiglenes f√°jl t√∂rl√©si hiba: {e}")
    
    def save_transcription(self, text):
        """Elmenti a felismert sz√∂veget id≈ëb√©lyeggel ell√°tott f√°jlba"""
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H:%M:%S")
        filename = f"diktatum_{timestamp}.txt"
        filepath = self.output_dir / filename
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"Dikt√°l√°s id≈ëpontja: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("-" * 50 + "\n\n")
                f.write(text)
                f.write("\n")
            
            print(f"üìÅ F√°jl mentve: {filepath}")
            self.logger.info(f"Sz√∂veg f√°jl mentve: {filepath}")
            self.logger.info(f"Mentett sz√∂veg: '{text}'")
            
        except Exception as e:
            print(f"Hiba a f√°jl ment√©sekor: {e}")
            self.logger.error(f"F√°jl ment√©si hiba: {e}")
    
    def cleanup(self):
        """Tiszt√≠t√°s"""
        self.logger.info("Program le√°ll√≠t√°s")
        if self.old_settings:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
        self.audio.terminate()
        self.logger.info("Cleanup befejezve")
    
    def get_key(self):
        """Billenty≈± olvas√°sa root jogosults√°g n√©lk√ºl"""
        if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
            key = sys.stdin.read(1)
            return key
        return None
    
    def run(self):
        """F≈ëprogram futtat√°sa"""
        os.system('clear') 
        print("=" * 60)
        print("üéôÔ∏è  WHISPER DIKT√ÅL√ì - FLUX")
        print("=" * 60)
        print()
        print("Ir√°ny√≠t√°s:")
        print("  SPACE vagy s + ENTER - Felv√©tel ind√≠t√°sa/le√°ll√≠t√°sa")
        print("  q + ENTER       - Kil√©p√©s")
        print(f"  F√°jlok ment√©si helye: {self.output_dir.absolute()}")
        print(f"  Logf√°jl: {self.output_dir.absolute()}/dictate.log")
        print()
        print("V√°rakoz√°s parancsra...")
        
        self.logger.info("Felhaszn√°l√≥i interf√©sz elind√≠tva")
        
        try:
            # Terminal raw m√≥dba √°ll√≠t√°sa
            self.old_settings = termios.tcgetattr(sys.stdin)
            tty.setraw(sys.stdin.fileno())
            
            while True:
                # Vissza√°ll√≠tjuk a norm√°l m√≥dot input olvas√°shoz
                termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
                
                try:
                    command = input("\n> ").strip().lower()
                    self.logger.info(f"Felhaszn√°l√≥i parancs: '{command}'")
                except EOFError:
                    break
                
                if command in ['s', 'space', '']:
                    if not self.recording:
                        self.start_recording()
                    else:
                        self.stop_recording()
                
                elif command in ['q', 'quit', 'exit']:
                    if self.recording:
                        self.stop_recording()
                    print("\nüëã Viszl√°t!")
                    self.logger.info("Felhaszn√°l√≥ kil√©pett")
                    break
                    
                elif command == 'help':
                    print("\nEl√©rhet≈ë parancsok:")
                    print("  s, space, ENTER - Felv√©tel ind√≠t√°sa/le√°ll√≠t√°sa")
                    print("  q, quit, exit   - Kil√©p√©s")
                    print("  help           - S√∫g√≥ megjelen√≠t√©se")
                    self.logger.info("S√∫g√≥ megjelen√≠tve")
                
                else:
                    self.logger.info(f"Ismeretlen parancs: '{command}'")
                
                # Raw m√≥dba vissza√°ll√≠t√°s
                tty.setraw(sys.stdin.fileno())
                        
        except KeyboardInterrupt:
            if self.recording:
                self.stop_recording()
            print("\nüëã Program megszak√≠tva.")
            self.logger.info("Program megszak√≠tva (Ctrl+C)")
        
        finally:
            self.cleanup()

def main():
    parser = argparse.ArgumentParser(
        description="Magyar nyelv≈± dikt√°l√≥ program Whisper haszn√°lat√°val"
    )
    parser.add_argument(
        "--model", 
        choices=["tiny", "base", "small", "medium", "large"],
        default="base",
        help="Whisper model m√©rete (alap√©rtelmezett: base)"
    )
    parser.add_argument(
        "--output-dir",
        default="diktatum",
        help="Kimeneti k√∂nyvt√°r (alap√©rtelmezett: diktatum)"
    )
    
    args = parser.parse_args()
    
    print("F√ºgg≈ës√©gek ellen≈ërz√©se...")
    
    # Rendszerk√∂vetelm√©nyek ellen≈ërz√©se
    try:
        # ALSA hib√°k elnyom√°sa
        import contextlib
        import os
        
        # PyAudio ALSA hib√°k elnyom√°sa
        with contextlib.redirect_stderr(open(os.devnull, 'w')):
            audio = pyaudio.PyAudio()
            info = audio.get_host_api_info_by_index(0)
            audio.terminate()
    except Exception as e:
        print(f"‚ùå Mikrofon hiba: {e}")
        print("Ellen≈ërizd, hogy a mikrofon csatlakoztatva van √©s haszn√°lhat√≥.")
        return
    
    dictation = HungarianDictation(
        model_size=args.model,
        output_dir=args.output_dir
    )
    
    dictation.run()

if __name__ == "__main__":
    main()
