#!/usr/bin/env python3
"""
Magyar nyelv≈± dikt√°l√≥ program Whisper haszn√°lat√°val
Haszn√°lat: python dictate.py [--model MODEL_SIZE] [--output-dir DIR]
"""

import argparse
import contextlib
import datetime
import logging
import os
import sys
import tempfile
import threading
from pathlib import Path

try:
    import whisper
    import pyaudio
    import wave
    import select
    import tty
    import termios
except ImportError as import_error:
    print(f"Hi√°nyz√≥ f√ºgg≈ës√©g: {import_error}")
    print("Telep√≠tsd a sz√ºks√©ges csomagokat:")
    print("pip install openai-whisper pyaudio")
    sys.exit(1)


class HungarianDictation:
    """Magyar nyelv≈± dikt√°l√≥ oszt√°ly Whisper haszn√°lat√°val"""

    # pylint: disable=too-many-instance-attributes
    # Sok attrib√∫tum sz√ºks√©ges az audio kezel√©shez √©s √°llapot k√∂vet√©shez

    def __init__(self, model_size="base", output_dir="diktatum"):
        """
        Inicializ√°lja a dikt√°l√≥ rendszert

        Args:
            model_size: Whisper model m√©rete (tiny, base, small, medium, large)
            output_dir: Kimeneti k√∂nyvt√°r neve
        """
        self.model_size = model_size
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)

        # Logging be√°ll√≠t√°sa
        self.logger = None
        self.setup_logging()

        # Audio be√°ll√≠t√°sok
        self.chunk = 1024
        self.format = pyaudio.paInt16
        self.channels = 1
        self.rate = 16000

        os.environ['ALSA_CARD'] = 'default'

        self.audio = pyaudio.PyAudio()
        self.recording = False
        self.frames = []
        self.stream = None
        self.record_thread = None

        # Terminal be√°ll√≠t√°sok billenty≈±zet olvas√°shoz
        self.old_settings = None
        self.model = None

        print(f"Whisper model bet√∂lt√©se ({model_size})...")
        self.logger.info("Whisper model bet√∂lt√©se: %s", model_size)
        try:
            self.model = whisper.load_model(model_size)
            print("Model sikeresen bet√∂ltve!")
            self.logger.info("Whisper model sikeresen bet√∂ltve")
        except (OSError, RuntimeError, ValueError) as error:
            print(f"Hiba a model bet√∂lt√©sekor: {error}")
            self.logger.error("Hiba a model bet√∂lt√©sekor: %s", error)
            sys.exit(1)

    def setup_logging(self):
        """Logging be√°ll√≠t√°sa"""
        log_file = self.output_dir / "dictate.log"

        # Logger l√©trehoz√°sa
        self.logger = logging.getLogger('dictate')
        self.logger.setLevel(logging.INFO)

        # File handler
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.INFO)

        # Form√°tum be√°ll√≠t√°sa
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        file_handler.setFormatter(formatter)

        # Handler hozz√°ad√°sa
        if not self.logger.handlers:  # Elker√ºli a duplik√°l√°st
            self.logger.addHandler(file_handler)

        self.logger.info("=" * 50)
        self.logger.info("Dictate program elind√≠tva")

    def start_recording(self):
        """Elind√≠tja a hangfelv√©telt"""
        if self.recording:
            return

        self.recording = True
        self.frames = []

        try:
            self.stream = self.audio.open(
                format=self.format,
                channels=self.channels,
                rate=self.rate,
                input=True,
                frames_per_buffer=self.chunk
            )

            print("üé§ Felv√©tel elkezdve...")
            self.logger.info("Hangfelv√©tel elind√≠tva")

            # H√°tt√©rben fut a felv√©tel
            self.record_thread = threading.Thread(target=self._record_audio)
            self.record_thread.start()

        except (OSError, ValueError, pyaudio.PyAudioError) as error:
            print(f"Hiba a felv√©tel ind√≠t√°sakor: {error}")
            self.logger.error("Hiba a felv√©tel ind√≠t√°sakor: %s", error)
            self.recording = False

    def _record_audio(self):
        """H√°tt√©rben r√∂gz√≠ti a hangot"""
        frame_count = 0
        while self.recording:
            try:
                data = self.stream.read(self.chunk, exception_on_overflow=False)
                self.frames.append(data)
                frame_count += 1

                # Logol√°s minden 100 frame-n√©l (kb. m√°sodpercenk√©nt)
                if frame_count % 100 == 0:
                    duration = frame_count * self.chunk / self.rate
                    self.logger.debug("Felv√©tel folyik: %.1f m√°sodperc", duration)

            except (OSError, IOError, pyaudio.PyAudioError) as error:
                self.logger.error("Hiba a felv√©tel sor√°n: %s", error)
                break

    def stop_recording(self):
        """Le√°ll√≠tja a hangfelv√©telt √©s feldolgozza"""
        if not self.recording:
            return

        self.recording = False
        print("‚èπÔ∏è  Felv√©tel le√°ll√≠tva, feldolgoz√°s...")

        duration = len(self.frames) * self.chunk / self.rate
        self.logger.info("Felv√©tel le√°ll√≠tva, id≈ëtartam: %.2f m√°sodperc", duration)

        # V√°rjuk meg a record thread befejez≈ëd√©s√©t
        if self.record_thread:
            self.record_thread.join()

        try:
            if self.stream:
                self.stream.stop_stream()
                self.stream.close()
        except (OSError, pyaudio.PyAudioError) as error:
            self.logger.warning("Stream z√°r√°si hiba: %s", error)

        if not self.frames:
            print("Nincs r√∂gz√≠tett hang.")
            self.logger.warning("Nincs r√∂gz√≠tett hang")
            return

        self._process_audio()

    def _check_audio_quality(self, audio_data):
        """Ellen≈ërzi az audio min≈ës√©g√©t √©s csendet"""
        import numpy as np
        
        # Bytes to numpy array
        audio_array = np.frombuffer(b''.join(audio_data), dtype=np.int16)
        
        # √Åtlagos amplit√∫d√≥ sz√°m√≠t√°sa
        avg_amplitude = np.mean(np.abs(audio_array))
        max_amplitude = np.max(np.abs(audio_array))
        
        # Csend k√ºsz√∂b (ezeket lehet finomhangolni)
        silence_threshold = 500  # Nagyon alacsony hang k√ºsz√∂b
        min_max_amplitude = 1000  # Minim√°lis maxim√°lis amplit√∫d√≥
        
        self.logger.info("Audio statisztik√°k - √Åtlag: %.1f, Max: %.1f", 
                        avg_amplitude, max_amplitude)
        
        is_mostly_silent = (avg_amplitude < silence_threshold or 
                           max_amplitude < min_max_amplitude)
        
        return not is_mostly_silent, avg_amplitude, max_amplitude

    def _is_likely_hallucination(self, text, avg_amplitude):
        """Ellen≈ërzi, hogy a sz√∂veg val√≥sz√≠n≈±leg hallucin√°ci√≥-e"""
        # Gyakori Whisper hallucin√°ci√≥ mint√°k
        hallucination_patterns = [
            "k√∂sz√∂n√∂m",
            "thank you",
            "thanks for watching",
            "k√∂sz√∂n√∂m hogy meghallgatta",
            "k√∂sz√∂n√∂m a figyelmet",
            "vide√≥hoz",
            "video",
            "subscribe",
            "feliratkoz√°s",
            "like",
            "tetszik",
            "comment",
            "komment"
        ]
        
        text_lower = text.lower().strip()
        
        # Ha t√∫l r√∂vid √©s alacsony az amplit√∫d√≥
        if len(text_lower) < 50 and avg_amplitude < 800:
            # Ellen≈ërizz√ºk a hallucin√°ci√≥ mint√°kat
            for pattern in hallucination_patterns:
                if pattern in text_lower:
                    return True
        
        # Ha nagyon r√∂vid sz√∂veg √©s nagyon alacsony hang
        if len(text_lower) < 20 and avg_amplitude < 300:
            return True
            
        return False

    def _process_audio(self):
        """Feldolgozza a r√∂gz√≠tett hangot"""
        # Audio min≈ës√©g ellen≈ërz√©se
        try:
            has_sound, avg_amp, max_amp = self._check_audio_quality(self.frames)
            
            if not has_sound:
                print("‚ùå T√∫l halk vagy csendes felv√©tel. Pr√≥b√°lj hangosabban besz√©lni!")
                self.logger.warning("Audio t√∫l halk - √°tlag: %.1f, max: %.1f", avg_amp, max_amp)
                return
                
        except ImportError:
            # Ha nincs numpy, folytatjuk numpy n√©lk√ºl
            self.logger.warning("NumPy nem el√©rhet≈ë, audio min≈ës√©g ellen≈ërz√©s kihagyva")
            avg_amp = 1000  # Alap√©rtelmezett √©rt√©k
        except Exception as error:
            self.logger.warning("Audio min≈ës√©g ellen≈ërz√©si hiba: %s", error)
            avg_amp = 1000
        
        # Ideiglenes f√°jl l√©trehoz√°sa
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
            temp_filename = temp_file.name

            # WAV f√°jl √≠r√°sa
            with wave.open(temp_filename, 'wb') as wave_file:
                wave_file.setnchannels(self.channels)
                wave_file.setsampwidth(self.audio.get_sample_size(self.format))
                wave_file.setframerate(self.rate)
                wave_file.writeframes(b''.join(self.frames))

        self.logger.info("Ideiglenes WAV f√°jl l√©trehozva: %s", temp_filename)

        # Whisper feldolgoz√°s
        try:
            print("ü§ñ Besz√©dfelismer√©s folyamatban...")
            self.logger.info("Whisper feldolgoz√°s elkezdve")

            result = self.model.transcribe(
                temp_filename,
                language="hu",  # Magyar nyelv
                task="transcribe",
                # Tov√°bbi param√©terek a hallucin√°ci√≥ cs√∂kkent√©s√©re
                temperature=0.0,  # Determinisztikus eredm√©ny
                no_speech_threshold=0.6,  # Magasabb k√ºsz√∂b a csendes r√©szekhez
                logprob_threshold=-1.0,  # Alacsonyabb val√≥sz√≠n≈±s√©g≈± sz√∂vegek kisz≈±r√©se
            )

            transcribed_text = result["text"].strip()
            segments = result.get('segments', [])
            no_speech_prob = result.get('no_speech_prob', 0.0)
            
            self.logger.info("Whisper eredm√©ny: '%s' (szegmensek: %d, no_speech_prob: %.3f)",
                           transcribed_text, len(segments), no_speech_prob)

            # Ellen≈ërizz√ºk a hallucin√°ci√≥ val√≥sz√≠n≈±s√©g√©t
            if transcribed_text:
                if no_speech_prob > 0.8:
                    print("‚ùå Nagy val√≥sz√≠n≈±s√©ggel nincs besz√©d a felv√©telben.")
                    self.logger.info("Magas no_speech_prob (%.3f), eredm√©ny elvetve", no_speech_prob)
                elif self._is_likely_hallucination(transcribed_text, avg_amp):
                    print("‚ùå A felismert sz√∂veg val√≥sz√≠n≈±leg hallucin√°ci√≥ (h√°tt√©rzaj).")
                    self.logger.info("Hallucin√°ci√≥ gyan√∫: '%s'", transcribed_text)
                else:
                    self.save_transcription(transcribed_text)
                    print("‚úÖ Sz√∂veg mentve!")
            else:
                print("‚ùå Nem siker√ºlt sz√∂veget felismerni.")
                self.logger.warning("√úres sz√∂veg eredm√©ny a Whisper-t≈ël")

        except (OSError, RuntimeError, ValueError, whisper.DecodingError) as error:
            print(f"Hiba a besz√©dfelismer√©s sor√°n: {error}")
            self.logger.error("Whisper feldolgoz√°si hiba: %s", error)
        finally:
            # Ideiglenes f√°jl t√∂rl√©se
            try:
                os.unlink(temp_filename)
                self.logger.info("Ideiglenes f√°jl t√∂r√∂lve")
            except OSError as error:
                self.logger.warning("Ideiglenes f√°jl t√∂rl√©si hiba: %s", error)

    def save_transcription(self, text):
        """Elmenti a felismert sz√∂veget id≈ëb√©lyeggel ell√°tott f√°jlba"""
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H:%M:%S")
        filename = f"diktatum_{timestamp}.txt"
        filepath = self.output_dir / filename

        try:
            with open(filepath, 'w', encoding='utf-8') as text_file:
                current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                text_file.write(f"Dikt√°l√°s id≈ëpontja: {current_time}\n")
                text_file.write("-" * 50 + "\n\n")
                text_file.write(text)
                text_file.write("\n")

            print(f"üìÅ F√°jl mentve: {filepath}")
            self.logger.info("Sz√∂veg f√°jl mentve: %s", filepath)
            self.logger.info("Mentett sz√∂veg: '%s'", text)

        except (OSError, IOError, UnicodeError) as error:
            print(f"Hiba a f√°jl ment√©sekor: {error}")
            self.logger.error("F√°jl ment√©si hiba: %s", error)

    def cleanup(self):
        """Tiszt√≠t√°s"""
        self.logger.info("Program le√°ll√≠t√°s")
        if self.old_settings:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
        self.audio.terminate()
        self.logger.info("Cleanup befejezve")

    def get_key(self):
        """Billenty≈± olvas√°sa root jogosults√°g n√©lk√ºl"""
        if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
            key = sys.stdin.read(1)
            return key
        return None

    def _handle_command(self, command):
        """Parancs feldolgoz√°sa"""
        if command in ['s', 'space', '']:
            if not self.recording:
                self.start_recording()
            else:
                self.stop_recording()
            return True

        if command in ['q', 'quit', 'exit']:
            if self.recording:
                self.stop_recording()
            print("\nüëã Viszl√°t!")
            self.logger.info("Felhaszn√°l√≥ kil√©pett")
            return False

        if command == 'help':
            print("\nEl√©rhet≈ë parancsok:")
            print("  s, space, ENTER - Felv√©tel ind√≠t√°sa/le√°ll√≠t√°sa")
            print("  q, quit, exit   - Kil√©p√©s")
            print("  help           - S√∫g√≥ megjelen√≠t√©se")
            self.logger.info("S√∫g√≥ megjelen√≠tve")
            return True

        self.logger.info("Ismeretlen parancs: '%s'", command)
        return True

    def run(self):
        """F≈ëprogram futtat√°sa"""
        # pylint: disable=too-many-branches,too-many-statements
        # A run met√≥dus term√©szetesen √∂sszetett a felhaszn√°l√≥i interf√©sz miatt

        os.system('clear')
        print("=" * 60)
        print("üéôÔ∏è  WHISPER DIKT√ÅL√ì - FLUX")
        print("=" * 60)
        print()
        print("Ir√°ny√≠t√°s:")
        print("  SPACE vagy s + ENTER - Felv√©tel ind√≠t√°sa/le√°ll√≠t√°sa")
        print("  q + ENTER       - Kil√©p√©s")
        print(f"  F√°jlok ment√©si helye: {self.output_dir.absolute()}")
        print(f"  Logf√°jl: {self.output_dir.absolute()}/dictate.log")
        print()
        print("V√°rakoz√°s parancsra...")

        self.logger.info("Felhaszn√°l√≥i interf√©sz elind√≠tva")

        try:
            # Terminal raw m√≥dba √°ll√≠t√°sa
            self.old_settings = termios.tcgetattr(sys.stdin)
            tty.setraw(sys.stdin.fileno())

            while True:
                # Vissza√°ll√≠tjuk a norm√°l m√≥dot input olvas√°shoz
                termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)

                try:
                    command = input("\n> ").strip().lower()
                    self.logger.info("Felhaszn√°l√≥i parancs: '%s'", command)
                except EOFError:
                    break

                if not self._handle_command(command):
                    break

                # Raw m√≥dba vissza√°ll√≠t√°s
                tty.setraw(sys.stdin.fileno())

        except KeyboardInterrupt:
            if self.recording:
                self.stop_recording()
            print("\nüëã Program megszak√≠tva.")
            self.logger.info("Program megszak√≠tva (Ctrl+C)")

        finally:
            self.cleanup()


def check_microphone():
    """Ellen≈ërzi a mikrofon el√©rhet≈ës√©g√©t"""
    try:
        # ALSA hib√°k elnyom√°sa
        with contextlib.redirect_stderr(open(os.devnull, 'w', encoding='utf-8')):
            audio = pyaudio.PyAudio()
            # Csak ellen≈ërizz√ºk, hogy el tudjuk √©rni az audio rendszert
            audio.get_host_api_count()
            audio.terminate()
        return True
    except (OSError, pyaudio.PyAudioError) as error:
        print(f"‚ùå Mikrofon hiba: {error}")
        print("Ellen≈ërizd, hogy a mikrofon csatlakoztatva van √©s haszn√°lhat√≥.")
        return False


def main():
    """F≈ëprogram"""
    parser = argparse.ArgumentParser(
        description="Magyar nyelv≈± dikt√°l√≥ program Whisper haszn√°lat√°val"
    )
    parser.add_argument(
        "--model",
        choices=["tiny", "base", "small", "medium", "large"],
        default="base",
        help="Whisper model m√©rete (alap√©rtelmezett: base)"
    )
    parser.add_argument(
        "--output-dir",
        default="diktatum",
        help="Kimeneti k√∂nyvt√°r (alap√©rtelmezett: diktatum)"
    )

    args = parser.parse_args()

    print("F√ºgg≈ës√©gek ellen≈ërz√©se...")

    # Rendszerk√∂vetelm√©nyek ellen≈ërz√©se
    if not check_microphone():
        return

    dictation = HungarianDictation(
        model_size=args.model,
        output_dir=args.output_dir
    )

    dictation.run()


if __name__ == "__main__":
    main()